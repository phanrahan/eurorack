   1               		.file	"blink.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	setup
  12               	setup:
  13               	.LFB6:
  14               		.file 1 "blink.c"
   1:blink.c       **** #include <avr/io.h>
   2:blink.c       **** #include <util/delay.h>
   3:blink.c       **** 
   4:blink.c       **** // Hardware Defines
   5:blink.c       **** #define LEDS_ATTACK		0x01
   6:blink.c       **** #define LEDS_DECAY		0x04
   7:blink.c       **** #define LEDS_SUSTAIN	0x02
   8:blink.c       **** #define LEDS_RELEASE	0x08
   9:blink.c       **** #define LEDS_IDLE_MASK	0xF0
  10:blink.c       **** 
  11:blink.c       **** // LED macros
  12:blink.c       **** #define LED_ATTACK  {PORTD|=~LEDS_IDLE_MASK;PORTD&=~LEDS_ATTACK;}
  13:blink.c       **** #define LED_DECAY   {PORTD|=~LEDS_IDLE_MASK;PORTD&=~LEDS_DECAY;}
  14:blink.c       **** #define LED_SUSTAIN {PORTD|=~LEDS_IDLE_MASK;PORTD&=~LEDS_SUSTAIN;}
  15:blink.c       **** #define LED_RELEASE {PORTD|=~LEDS_IDLE_MASK;PORTD&=~LEDS_RELEASE;}
  16:blink.c       **** #define LED_IDLE    {PORTD|=~LEDS_IDLE_MASK;}
  17:blink.c       **** 
  18:blink.c       **** void setup(void)
  19:blink.c       **** {
  15               		.loc 1 19 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  20:blink.c       **** 	DDRD  = 0x0F; //PD0-3 outputs
  21               		.loc 1 20 0
  22 0000 8FE0      		ldi r24,lo8(15)
  23 0002 8AB9      		out 0xa,r24
  21:blink.c       ****     LED_IDLE
  24               		.loc 1 21 0
  25 0004 8BB1      		in r24,0xb
  26 0006 8F60      		ori r24,lo8(15)
  27 0008 8BB9      		out 0xb,r24
  28 000a 0895      		ret
  29               		.cfi_endproc
  30               	.LFE6:
  32               	.global	delay
  34               	delay:
  35               	.LFB7:
  22:blink.c       **** }
  23:blink.c       **** 
  24:blink.c       **** // From http://www.bretmulvey.com/avrdelay.html
  25:blink.c       **** void delay(void)
  26:blink.c       **** {
  36               		.loc 1 26 0
  37               		.cfi_startproc
  38               	/* prologue: function */
  39               	/* frame size = 0 */
  40               	/* stack size = 0 */
  41               	.L__stack_usage = 0
  27:blink.c       **** asm volatile (
  42               		.loc 1 27 0
  43               	/* #APP */
  44               	 ;  27 "blink.c" 1
  45 000c 29E2      		    ldi  r18, 41
  46 000e 36E9      	    ldi  r19, 150
  47 0010 40E8      	    ldi  r20, 128
  48 0012 4A95      	1:  dec  r20
  49 0014 01F4      	    brne 1b
  50 0016 3A95      	    dec  r19
  51 0018 01F4      	    brne 1b
  52 001a 2A95      	    dec  r18
  53 001c 01F4      	    brne 1b
  54               	
  55               	 ;  0 "" 2
  56               	/* #NOAPP */
  57 001e 0895      		ret
  58               		.cfi_endproc
  59               	.LFE7:
  61               		.section	.text.startup,"ax",@progbits
  62               	.global	main
  64               	main:
  65               	.LFB8:
  28:blink.c       ****     "    ldi  r18, 41"  "\n"
  29:blink.c       ****     "    ldi  r19, 150" "\n"
  30:blink.c       ****     "    ldi  r20, 128" "\n"
  31:blink.c       ****     "1:  dec  r20"  "\n"
  32:blink.c       ****     "    brne 1b"   "\n"
  33:blink.c       ****     "    dec  r19"  "\n"
  34:blink.c       ****     "    brne 1b"   "\n"
  35:blink.c       ****     "    dec  r18"  "\n"
  36:blink.c       ****     "    brne 1b"   "\n"
  37:blink.c       **** );
  38:blink.c       **** }
  39:blink.c       **** 
  40:blink.c       **** int main(void)
  41:blink.c       **** {
  66               		.loc 1 41 0
  67               		.cfi_startproc
  68               	/* prologue: function */
  69               	/* frame size = 0 */
  70               	/* stack size = 0 */
  71               	.L__stack_usage = 0
  42:blink.c       ****     setup();
  72               		.loc 1 42 0
  73 0000 0E94 0000 		call setup
  74               	.LVL0:
  75               	.L4:
  43:blink.c       **** 
  44:blink.c       **** 	while(1)
  45:blink.c       **** 	{
  46:blink.c       ****         /*
  47:blink.c       ****         LED_ATTACK
  48:blink.c       ****         _delay_ms(1000.0);
  49:blink.c       ****         LED_IDLE
  50:blink.c       ****         _delay_ms(1000.0);
  51:blink.c       ****         LED_DECAY
  52:blink.c       ****         _delay_ms(1000.0);
  53:blink.c       ****         LED_IDLE
  54:blink.c       ****         _delay_ms(1000.0);
  55:blink.c       ****         LED_RELEASE
  56:blink.c       ****         _delay_ms(1000.0);
  57:blink.c       ****         LED_IDLE
  58:blink.c       ****         _delay_ms(1000.0);
  59:blink.c       ****         */
  60:blink.c       ****         LED_ATTACK
  76               		.loc 1 60 0 discriminator 1
  77 0004 8BB1      		in r24,0xb
  78 0006 8F60      		ori r24,lo8(15)
  79 0008 8BB9      		out 0xb,r24
  80 000a 5898      		cbi 0xb,0
  81               	.LVL1:
  82               	.LBB6:
  83               	.LBB7:
  84               		.file 2 "/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h"
   1:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    All rights reserved.
   5:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
   6:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
   9:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
  12:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****      distribution.
  16:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
  17:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
  21:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
  33:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** /* $Id$ */
  34:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
  35:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
  38:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** #  endif
  42:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
  44:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** #include <math.h>
  47:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
  48:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** /** \file */
  49:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     \code
  51:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     \endcode
  55:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
  56:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     used.
  60:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
  61:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
  70:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     routines linked into the application.
  78:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
  79:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
  83:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** */
  84:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
  85:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** #endif
  89:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
  90:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     \def F_CPU
  95:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
  97:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
 103:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****     integer value.
 107:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****  */
 108:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** #endif
 110:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
 111:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** #endif
 114:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
 115:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** #  include <math.h>
 119:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** #endif
 120:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
 121:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** /**
 122:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
 124:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
 126:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
 129:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
 131:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
 137:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
 142:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    microseconds of delay.
 146:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
 147:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    respectively.
 151:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
 152:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    \note
 153:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
 154:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
 164:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****  */
 165:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** void
 166:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** {
 168:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 	double __tmp ;
 169:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
 176:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
 179:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
 182:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 	#else
 183:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 		//round up by default
 184:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 	#endif
 186:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 
 187:/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  85               		.loc 2 187 0 discriminator 1
  86 000c 2FEF      		ldi r18,lo8(3999999)
  87 000e 88E0      		ldi r24,hi8(3999999)
  88 0010 9DE3      		ldi r25,hlo8(3999999)
  89 0012 2150      	1:	subi r18,1
  90 0014 8040      		sbci r24,0
  91 0016 9040      		sbci r25,0
  92 0018 01F4      		brne 1b
  93 001a 00C0      		rjmp .
  94 001c 0000      		nop
  95               	.LBE7:
  96               	.LBE6:
  61:blink.c       ****         //delay();
  62:blink.c       ****         _delay_ms(1000.0);
  63:blink.c       ****         LED_IDLE
  97               		.loc 1 63 0 discriminator 1
  98 001e 8BB1      		in r24,0xb
  99 0020 8F60      		ori r24,lo8(15)
 100 0022 8BB9      		out 0xb,r24
 101               	.LVL2:
 102               	.LBB8:
 103               	.LBB9:
 104               		.loc 2 187 0 discriminator 1
 105 0024 2FEF      		ldi r18,lo8(3999999)
 106 0026 88E0      		ldi r24,hi8(3999999)
 107 0028 9DE3      		ldi r25,hlo8(3999999)
 108 002a 2150      	1:	subi r18,1
 109 002c 8040      		sbci r24,0
 110 002e 9040      		sbci r25,0
 111 0030 01F4      		brne 1b
 112 0032 00C0      		rjmp .
 113 0034 0000      		nop
 114 0036 00C0      		rjmp .L4
 115               	.LBE9:
 116               	.LBE8:
 117               		.cfi_endproc
 118               	.LFE8:
 120               		.text
 121               	.Letext0:
 122               		.file 3 "/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:00000000 blink.c
/var/folders/r4/1pk6klb974nbm1yyfb57p2k00000gn/T//ccsgJTKe.s:2      *ABS*:0000003e __SP_H__
/var/folders/r4/1pk6klb974nbm1yyfb57p2k00000gn/T//ccsgJTKe.s:3      *ABS*:0000003d __SP_L__
/var/folders/r4/1pk6klb974nbm1yyfb57p2k00000gn/T//ccsgJTKe.s:4      *ABS*:0000003f __SREG__
/var/folders/r4/1pk6klb974nbm1yyfb57p2k00000gn/T//ccsgJTKe.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/r4/1pk6klb974nbm1yyfb57p2k00000gn/T//ccsgJTKe.s:6      *ABS*:00000001 __zero_reg__
/var/folders/r4/1pk6klb974nbm1yyfb57p2k00000gn/T//ccsgJTKe.s:12     .text:00000000 setup
/var/folders/r4/1pk6klb974nbm1yyfb57p2k00000gn/T//ccsgJTKe.s:34     .text:0000000c delay
/var/folders/r4/1pk6klb974nbm1yyfb57p2k00000gn/T//ccsgJTKe.s:64     .text.startup:00000000 main

NO UNDEFINED SYMBOLS
